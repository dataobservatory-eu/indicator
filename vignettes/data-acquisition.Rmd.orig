---
title: "Data Acquisition from Eurostat"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Data Acquisition from Eurostat}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup, echo=FALSE, message=FALSE}
library(devtools)
library(dplyr)
library(knitr)
require(kableExtra)
devtools::load_all()
```

```{r github-install, eval=FALSE, message=FALSE}
# This is at the moment a private repo
devtools::install_github("dataobservatory-eu/indicator")
```

```{r show_setup, eval=FALSE}
library(devtools)
library(dplyr)
library(knitr)
require(kableExtra)
library(indicator)
```
## Working with Eurostat Data

The [eurostat](http://ropengov.github.io/eurostat/index.html) package handles interaction with the Eurostat data warehouse. Unfortunately, after many years of stable work, recently we have short outages on the Eurostat server.  So the `get_eurostat_indicator()` should get a short extension that retries the download via `eurostat::get_eurostat()`several times if it receives a `NULL` return.

```{r data-from-eurostat, eval=FALSE}
airp <- get_eurostat_indicator (id="ENV_AIR_EMIS")
save_dir <- ifelse ( dir.exists("data-raw"), "data-raw", file.path("..", "data-raw") ) 
save( airp, file = file.path(save_dir, "airp.rda") )
```
As it can be seen from the message, the [eurostat](http://ropengov.github.io/eurostat/index.html) package downloads the latest data from the warehouse and saves it to the `tempdir()`. The `tempdir` is a temporary directory of any R environment. It means that a few megabytes of disk space must be available on the instance to run properly. 

```{r load-presaved}
load_dir <- ifelse(dir.exists("data-raw"), "data-raw", file.path("..", "data-raw") ) 
load(file.path(load_dir, "airp.rda"))
```


The eurostat id `ENV_AIR_EMIS` refers to the [Air pollutants by source sector (source: EEA)](https://ec.europa.eu/eurostat/databrowser/view/env_air_emis/default/table?lang=en) dataset. (See metadata description [here](https://ec.europa.eu/eurostat/cache/metadata/en/env_air_emis_esms.htm)) The eurostat package handles the interaction with Eurostat, i.e. downloading, tidying the data and using the correct metadata dictionary for labelling the data, with the important exception of sub-national (regional, metropolitan area) data.  That must be managed by an offspring of the [eurostat](http://ropengov.github.io/eurostat/index.html) package, namely our package [regions](https://regions.dataobservatory.eu/).

This actual data product is a database in itself, it contains `r length(unique ( airp$metadata$description_indicator))` unique environmental indicators about air pollution passed on to the Eurostat by the European Environmental Agency.  Why so many?  These indicators show 15 greenhouse gases and air pollutants,  for 35 geographical entities, over 10 years and  
dozens of industries. These indicators with a lot of processing could be ideally used for environmental impact assessment together with our [iotables](https://iotables.dataobservatory.eu/) package. For example, we can calculate the likely increase/decrease of methane from various economic policy interventions on the agricultural sub-sectors.

## Data Tables

The function `get_eurostat_indicator()` returns a list of three tables, and creates human readable descriptions using the Eurostat dictionaries to figure out what is going on. To keep the data traceable, I'll greatly reduce the indicators in this example by filtering to `forest fires` in the description. 

### Metadata

```{r example-metadata, results='asis'}
airp$metadata %>%
  select ( all_of(c("description_indicator", "indicator_code", "actual", "missing"))) %>%
  filter ( grepl("forest fires", .data$description_indicator)) %>%
  distinct_all() %>%
  kbl() 
```

The entire (filtered) metadata for forest fires: 

```{r example-forest-fires, results='asis'}
airp$metadata %>%
  filter ( grepl("forest fires", .data$description_indicator)) %>%
  distinct_all() %>%
  kbl() 
```

There are no missing variables here, but of course, we could forecast or backcast values per geographical entity, in this case, countries.

### Dictionary 

The `get_eurostat_indicator()` function saves the entire dictionary that allows the programmatic description of the data. For example, in the original database, `AS` abbreviates any pollution related to `Arsenic (As)`, or 	`NFR11B` is the activity code of the polluting process `Forest fires`. 

```{r example-labelling}
airp$labelling %>%
  filter ( grepl("forest fires", .data$description_indicator)) %>%
  distinct_all() %>%
  kbl ()
```


### Statistical Indicators

Of course, the most important element of the list returned by The `get_eurostat_indicator()` is the actual value of the indicator.

```{r example-indicator}
select_indicators <- airp$metadata %>%
        filter ( grepl("forest fires", .data$description_indicator)) %>%
        distinct ( .data$indicator_code ) %>% unlist () %>% as.character() 


airp$indicator %>%
  filter ( 
    .data$indicator_code %in% select_indicators 
      ) %>%
  distinct_all() %>%
  head(12) 
```

